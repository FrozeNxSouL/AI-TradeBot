services:
  app:
    build:
      context: .
      # target: final
    image: ai_website
    ports:
      - 3000:3000
    environment:
      NODE_ENV: development
      # DATABASE_URL: "postgresql://postgres:1234567890@ai_website-db-1:5000/tradebotdb"
    develop:
      watch:
        - action: sync
          path: ./src
          target: /app/src
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json

  db:
    image: postgres:16.7-alpine
    environment: 
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234567890
      POSTGRES_DB: tradebotdb
    ports:
      - "5000:5432" 
    command: ["postgres"] 
    # user: postgres
    # secrets:
    #   - db-password

    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker compose up`.
    #     depends_on:
    #       db:
    #         condition: service_healthy
    #   db:
    #     image: postgres
    #     restart: always
    #     user: postgres
    #     secrets:
    #       - db-password
    #     volumes:
    #       - db-data:/var/lib/postgresql/data
    #     environment:
    #       - POSTGRES_DB=example
    #       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    #     expose:
    #       - 5432
    #     healthcheck:
    #       test: [ "CMD", "pg_isready" ]
    #       interval: 10s
    #       timeout: 5s
    #       retries: 5
    # volumes:
    #   db-data:
    # secrets:
    #   db-password:
    #     file: db/password.txt
